TOKEN("::", scope_resolution)
TOKEN("++", increment)
TOKEN("--", decrement)
TOKEN(".", member_access)
TOKEN("->", dereferenced_member_access)
TOKEN("!", logical_not)
TOKEN("~", bitwise_not)
TOKEN("+", unary_plus)
TOKEN("-", unary_minus)
TOKEN("+", addition)
TOKEN("*", multiplication)
TOKEN("-", subtraction)
TOKEN("/", division)
TOKEN("%", modulo)
TOKEN("=", direct_assignment)
TOKEN("<<", bitshift_left)
TOKEN(">>", bitshift_right)
TOKEN("+=", compound_addition)
TOKEN("-=", compound_subtraction)
TOKEN("*=", compound_multiplication)
TOKEN("/=", compound_division)
TOKEN("%=", compound_modulo)
TOKEN("<<=", compound_bitshift_left)
TOKEN(">>=", compound_bitshift_right)
TOKEN(">", greater_than)
TOKEN(">=", greater_than_or_equal)
TOKEN("<", less_than)
TOKEN("<=", less_than_or_equal)
TOKEN("==", equality)
TOKEN("!=", not_equality)
TOKEN("&", bitwise_and)
TOKEN("^", bitwise_xor)
TOKEN("|", bitwise_or)
TOKEN("&&", _and)
TOKEN("||", _or)
TOKEN(",", comma)
TOKEN("{", open_curly)
TOKEN("}", closed_curly)
TOKEN("(", open_parentheses)
TOKEN(")", closed_parentheses)
TOKEN("[", open_bracket)
TOKEN("]", closed_bracket)
TOKEN("[[", open_attribute)
TOKEN("]]", closed_attribute)
TOKEN("\\", forward_slash)
TOKEN(";", semi_colon)
TOKEN(":", colon)